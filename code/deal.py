import numpy as np

# 牛顿内插法
def newton_inter(X, Y, day):
    test_num = len(X)
    F = np.zeros( (test_num, test_num) )
    for di in range(test_num):
        for i in range(test_num-di):
            if di == 0:
                F[i][i] = Y[i]
            else:
                F[i][i+di] = (F[i+1][i+di]-F[i][i+di-1]) / (X[i+di]-X[i])
    P = Y[0]
    for i in range(1, test_num):
        product = 1
        for j in range(i):
            product *= day-X[j]
        P += F[0][i] * product
    return P

class Meta:
    result = {'day':0, 'gender':''}
    def __init__(self, day_input, gender_input):
        self.get_input(day_input, gender_input)
        pass
    
    std_boy_height = {
        0 : [ 45.20, 46.90, 48.60, 50.40, 52.20, 54.00, 55.80 ],
        1 : [ 48.70, 50.70, 52.70, 54.80, 56.90, 59.00, 61.20 ],
        2 : [ 52.20, 54.30, 56.50, 58.70, 61.00, 63.30, 65.70 ],
        3 : [ 55.30, 57.50, 59.70, 62.00, 64.30, 66.60, 69.00 ],
        4 : [ 57.90, 60.10, 62.30, 64.60, 66.90, 69.30, 71.70 ],
        5 : [ 59.90, 62.10, 64.40, 66.70, 69.10, 71.50, 73.90 ],
        6 : [ 61.40, 63.70, 66.00, 68.40, 70.80, 73.30, 75.80 ],
        7 : [ 62.70, 65.00, 67.40, 69.80, 72.30, 74.80, 77.40 ],
        8 : [ 63.90, 66.30, 68.70, 71.20, 73.70, 76.30, 78.90 ],
        9 : [ 65.20, 67.60, 70.10, 72.60, 75.20, 77.80, 80.50 ],
        10 : [ 66.40, 68.90, 71.40, 74.00, 76.60, 79.30, 82.10 ],
        11 : [ 67.50, 70.10, 72.70, 75.30, 78.00, 80.80, 83.60 ],
        12 : [ 68.60, 71.20, 73.80, 76.50, 79.30, 82.10, 85.00 ],
        15 : [ 71.20, 74.00, 76.90, 79.80, 82.80, 85.80, 88.90 ],
        18 : [ 73.60, 76.60, 79.60, 82.70, 85.80, 89.10, 92.40 ],
        21 : [ 76.00, 79.10, 82.30, 85.60, 89.00, 92.40, 95.90 ],
        24 : [ 78.30, 81.60, 85.10, 88.50, 92.10, 95.80, 99.50 ],
        27 : [ 80.50, 83.90, 87.50, 91.10, 94.80, 98.60, 102.50 ],
        30 : [ 82.40, 85.90, 89.60, 93.30, 97.10, 101.00, 105.00 ],
        33 : [ 84.40, 88.00, 91.60, 95.40, 99.30, 103.20, 107.20 ],
        36 : [ 86.30, 90.00, 93.70, 97.50, 101.40, 105.30, 109.40 ],
        39 : [ 87.50, 91.20, 94.90, 98.80, 102.70, 106.70, 110.70 ],
        42 : [ 89.30, 93.00, 96.70, 100.60, 104.50, 108.60, 112.70 ],
        45 : [ 90.90, 94.60, 98.50, 102.40, 106.40, 110.40, 114.60 ],
        48 : [ 92.50, 96.30, 100.20, 104.10, 108.20, 112.30, 116.50 ],
        51 : [ 94.00, 97.90, 101.90, 105.90, 110.00, 114.20, 118.50 ],
        54 : [ 95.60, 99.50, 103.60, 107.70, 111.90, 116.20, 120.60 ],
        57 : [ 97.10, 101.10, 105.30, 109.50, 113.80, 118.20, 122.60 ],
        60 : [ 98.70, 102.80, 107.00, 111.30, 115.70, 120.10, 124.70 ],
        63 : [ 100.20, 104.40, 108.70, 113.00, 117.50, 122.00, 126.70 ],
        66 : [ 101.60, 105.90, 110.20, 114.70, 119.20, 123.80, 128.60 ],
        69 : [ 103.00, 107.30, 111.70, 116.30, 120.90, 125.60, 130.40 ],
        72 : [ 104.10, 108.60, 113.10, 117.70, 122.40, 127.20, 132.10 ],
        75 : [ 105.30, 109.80, 114.40, 119.20, 124.00, 128.80, 133.80 ],
        78 : [ 106.50, 111.10, 115.80, 120.70, 125.60, 130.50, 135.60 ],
        81 : [ 107.90, 112.60, 117.40, 122.30, 127.30, 132.40, 137.60 ]
    }

    std_girl_height = {
        0 : [ 44.70, 46.40, 48.00, 49.70, 51.40, 53.20, 55.00 ],
        1 : [ 47.90, 49.80, 51.70, 53.70, 55.70, 57.80, 59.90 ],
        2 : [ 51.10, 53.20, 55.30, 57.40, 59.60, 61.80, 64.10 ],
        3 : [ 54.20, 56.30, 58.40, 60.60, 62.80, 65.10, 67.50 ],
        4 : [ 56.70, 58.80, 61.00, 63.10, 65.40, 67.70, 70.00 ],
        5 : [ 58.60, 60.80, 62.90, 65.20, 67.40, 69.80, 72.10 ],
        6 : [ 60.10, 62.30, 64.50, 66.80, 69.10, 71.50, 74.00 ],
        7 : [ 61.30, 63.60, 65.90, 68.20, 70.60, 73.10, 75.60 ],
        8 : [ 62.50, 64.80, 67.20, 69.60, 72.10, 74.70, 77.30 ],
        9 : [ 63.70, 66.10, 68.50, 71.00, 73.60, 76.20, 78.90 ],
        10 : [ 64.90, 67.30, 69.80, 72.40, 75.00, 77.70, 80.50 ],
        11 : [ 66.10, 68.60, 71.10, 73.70, 76.40, 79.20, 82.00 ],
        12 : [ 67.20, 69.70, 72.30, 75.00, 77.70, 80.50, 83.40 ],
        15 : [ 70.20, 72.90, 75.60, 78.50, 81.40, 84.30, 87.40 ],
        18 : [ 72.80, 75.60, 78.50, 81.50, 84.60, 87.70, 91.00 ],
        21 : [ 75.10, 78.10, 81.20, 84.40, 87.70, 91.10, 94.50 ],
        24 : [ 77.30, 80.50, 83.80, 87.20, 90.70, 94.30, 98.00 ],
        27 : [ 79.30, 82.70, 86.20, 89.80, 93.50, 97.30, 101.20 ],
        30 : [ 81.40, 84.80, 88.40, 92.10, 95.90, 99.80, 103.80 ],
        33 : [ 83.40, 86.90, 90.50, 94.30, 98.10, 102.00, 106.10 ],
        36 : [ 85.40, 88.90, 92.50, 96.30, 100.10, 104.10, 108.10 ],
        39 : [ 86.60, 90.10, 93.80, 97.50, 101.40, 105.40, 109.40 ],
        42 : [ 88.40, 91.90, 95.60, 99.40, 103.30, 107.20, 111.30 ],
        45 : [ 90.10, 93.70, 97.40, 101.20, 105.10, 109.20, 113.30 ],
        48 : [ 91.70, 95.40, 99.20, 103.10, 107.00, 111.10, 115.30 ],
        51 : [ 93.20, 97.00, 100.90, 104.90, 109.00, 113.10, 117.40 ],
        54 : [ 94.80, 98.70, 102.70, 106.70, 110.90, 115.20, 119.50 ],
        57 : [ 96.40, 100.30, 104.40, 108.50, 112.80, 117.10, 121.60 ],
        60 : [ 97.80, 101.80, 106.00, 110.20, 114.50, 118.90, 123.40 ],
        63 : [ 99.30, 103.40, 107.60, 111.90, 116.20, 120.70, 125.30 ],
        66 : [ 100.70, 104.90, 109.20, 113.50, 118.00, 122.60, 127.20 ],
        69 : [ 102.00, 106.30, 110.70, 115.20, 119.70, 124.40, 129.10 ],
        72 : [ 103.20, 107.60, 112.00, 116.60, 121.20, 126.00, 130.80 ],
        75 : [ 104.40, 108.80, 113.40, 118.00, 122.70, 127.60, 132.50 ],
        78 : [ 105.50, 110.10, 114.70, 119.40, 124.30, 129.20, 134.20 ],
        81 : [ 106.70, 111.40, 116.10, 121.00, 125.90, 130.90, 136.10 ]
    }

    std_boy_weight = {
        0 : [ 2.26, 2.58, 2.93, 3.32, 3.73, 4.18, 4.66 ],
        1 : [ 3.09, 3.52, 3.99, 4.51, 5.07, 5.67, 6.33 ],
        2 : [ 3.94, 4.47, 5.05, 5.68, 6.38, 7.14, 7.97 ],
        3 : [ 4.69, 5.29, 5.37, 6.70, 7.51, 8.40, 9.37 ],
        4 : [ 5.25, 5.91, 6.34, 7.45, 8.34, 9.32, 10.39 ],
        5 : [ 5.66, 6.36, 7.14, 8.00, 8.95, 9.99, 11.15 ],
        6 : [ 5.97, 6.70, 7.51, 8.41, 9.41, 10.50, 11.72 ],
        7 : [ 6.24, 6.99, 7.83, 8.76, 9.79, 10.93, 12.20 ],
        8 : [ 6.46, 7.23, 8.09, 9.05, 10.11, 11.29, 12.60 ],
        9 : [ 6.67, 7.46, 8.35, 9.33, 10.42, 11.64, 12.99 ],
        10 : [ 6.86, 7.67, 8.58, 9.58, 10.71, 11.95, 13.34 ],
        11 : [ 7.04, 7.87, 8.80, 9.83, 10.98, 12.26, 13.68 ],
        12 : [ 7.21, 8.06, 9.00, 10.05, 11.23, 12.54, 14.00 ],
        15 : [ 7.68, 8.57, 9.57, 10.68, 11.93, 13.32, 14.88 ],
        18 : [ 8.13, 9.07, 10.12, 11.29, 12.61, 14.09, 15.75 ],
        21 : [ 8.61, 9.59, 10.69, 11.93, 13.33, 14.90, 16.66 ],
        24 : [ 9.06, 10.09, 11.24, 12.54, 14.01, 15.67, 17.54 ],
        27 : [ 9.47, 10.54, 11.75, 13.11, 14.64, 16.38, 18.36 ],
        30 : [ 9.86, 10.97, 12.22, 13.64, 15.24, 17.06, 19.13 ],
        33 : [ 10.24, 11.39, 12.68, 14.15, 15.82, 17.72, 19.89 ],
        36 : [ 10.61, 11.79, 13.13, 14.65, 16.39, 18.37, 20.64 ],
        39 : [ 10.97, 12.19, 13.57, 15.15, 16.95, 19.02, 21.39 ],
        42 : [ 11.31, 12.57, 14.00, 15.63, 17.50, 19.65, 22.13 ],
        45 : [ 11.66, 12.96, 14.44, 16.13, 18.07, 20.32, 22.91 ],
        48 : [ 12.01, 13.35, 14.88, 16.64, 18.67, 21.01, 23.73 ],
        51 : [ 12.37, 13.76, 15.35, 17.18, 19.30, 21.76, 24.63 ],
        54 : [ 12.74, 14.18, 15.84, 17.75, 19.98, 22.57, 25.61 ],
        57 : [ 13.12, 14.61, 16.34, 18.35, 20.69, 23.43, 26.68 ],
        60 : [ 13.50, 15.06, 16.87, 18.98, 21.46, 24.38, 27.85 ],
        63 : [ 13.86, 15.48, 17.38, 19.60, 22.21, 25.32, 29.04 ],
        66 : [ 14.18, 15.87, 17.85, 20.18, 22.94, 26.24, 30.22 ],
        69 : [ 14.48, 16.24, 18.31, 20.75, 23.66, 27.17, 31.43 ],
        72 : [ 14.74, 16.56, 18.71, 21.26, 24.32, 28.03, 32.57 ],
        75 : [ 15.01, 16.90, 19.14, 21.82, 25.06, 29.01, 33.89 ],
        78 : [ 15.30, 17.27, 19.62, 22.45, 25.89, 30.13, 35.41 ],
        81 : [ 15.66, 17.73, 20.22, 23.24, 26.95, 31.56, 37.39 ]
    }

    std_girl_weight = {
        0 : [ 2.26, 2.54, 2.85, 3.21, 3.63, 4.10, 4.65 ],
        1 : [ 2.98, 3.33, 3.74, 4.20, 4.74, 5.35, 6.05 ],
        2 : [ 3.72, 4.15, 4.65, 5.21, 5.86, 6.60, 7.46 ],
        3 : [ 4.40, 4.90, 5.47, 6.13, 6.87, 7.73, 8.71 ],
        4 : [ 4.93, 5.48, 6.11, 6.83, 7.65, 8.59, 9.66 ],
        5 : [ 5.33, 5.92, 6.59, 7.36, 8.23, 9.23, 10.38 ],
        6 : [ 5.64, 6.26, 6.96, 7.77, 8.68, 9.73, 10.93 ],
        7 : [ 5.90, 6.55, 7.28, 8.11, 9.06, 10.15, 11.40 ],
        8 : [ 6.13, 6.79, 7.55, 8.41, 9.39, 10.51, 11.80 ],
        9 : [ 6.34, 7.03, 7.81, 8.69, 9.70, 10.86, 12.18 ],
        10 : [ 6.53, 7.23, 8.03, 8.94, 9.98, 11.16, 12.52 ],
        11 : [ 6.71, 7.43, 8.25, 9.18, 10.24, 11.46, 12.85 ],
        12 : [ 6.87, 7.61, 8.45, 9.40, 10.48, 11.73, 13.15 ],
        15 : [ 7.34, 8.12, 9.01, 10.02, 11.18, 12.50, 14.02 ],
        18 : [ 7.79, 8.63, 9.57, 10.65, 11.88, 13.29, 14.90 ],
        21 : [ 8.26, 9.15, 10.15, 11.30, 12.61, 14.12, 15.85 ],
        24 : [ 8.70, 9.64, 10.70, 11.92, 13.31, 14.92, 16.77 ],
        27 : [ 9.10, 10.09, 11.21, 12.50, 13.97, 15.67, 17.63 ],
        30 : [ 9.48, 10.52, 11.70, 13.05, 14.60, 16.39, 18.47 ],
        33 : [ 9.86, 10.94, 12.18, 13.59, 15.22, 17.11, 19.29 ],
        36 : [ 10.23, 11.36, 12.65, 14.13, 15.83, 17.81, 20.10 ],
        39 : [ 10.60, 11.77, 13.11, 14.65, 16.43, 18.50, 20.90 ],
        42 : [ 10.95, 12.16, 13.55, 15.16, 17.01, 19.17, 21.69 ],
        45 : [ 11.29, 12.55, 14.00, 15.67, 17.60, 19.85, 22.49 ],
        48 : [ 11.62, 12.93, 14.44, 16.17, 18.19, 20.54, 23.30 ],
        51 : [ 11.96, 13.32, 14.88, 16.69, 18.79, 21.25, 24.14 ],
        54 : [ 12.30, 13.71, 15.33, 17.22, 19.42, 22.00, 25.04 ],
        57 : [ 12.62, 14.08, 15.78, 17.75, 20.05, 22.75, 25.96 ],
        60 : [ 12.93, 14.44, 16.20, 18.26, 20.66, 23.50, 26.87 ],
        63 : [ 13.23, 14.80, 16.64, 18.78, 21.30, 24.28, 27.84 ],
        66 : [ 13.54, 15.18, 17.09, 19.33, 21.98, 25.12, 28.89 ],
        69 : [ 13.84, 15.54, 17.53, 19.88, 22.65, 25.96, 29.95 ],
        72 : [ 14.11, 15.87, 17.94, 20.37, 23.27, 26.74, 30.94 ],
        75 : [ 14.38, 16.21, 18.35, 20.89, 23.92, 27.57, 32.00 ],
        78 : [ 14.66, 16.55, 18.78, 21.44, 24.61, 28.46, 33.14 ],
        81 : [ 14.96, 16.92, 19.25, 22.03, 25.37, 29.42, 34.40 ]
    }

    def get_input(self, day_input, gender_input):
        self.result['day'] = day_input
        self.result['gender'] = gender_input
    
    def trans(self, step=4, zoom=100):
        for item in ['weight','height']:
            self.result[item] = {}
            data = eval('self.std_'+self.result['gender']+'_'+item)
            mon_input = int(self.result['day'] / 30)
            index_min = max(0, mon_input-step if mon_input<12 else int((mon_input-12)/3)+12-step)
            index_max = min(35, index_min+step*2)
            Xmon = np.array( list(data.keys()) )
            Yall = np.array( list(data.values()) )
            X = list(Xmon*30/zoom)
            for var in range(7):
                # 提取数据列表
                Y = Yall[:, var]
                self.result[item]['{:d}SD'.format(var-3)] = \
                    newton_inter(
                        X[index_min:index_max], 
                        Y[index_min:index_max], 
                        self.result['day']/zoom)
        return self.result

a = Meta(1000, 'boy')

a.trans()
for each_item in a.result.values():
    print(each_item)